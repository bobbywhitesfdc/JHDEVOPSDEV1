//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

@IsTest
public class CopadoMetadata_Test {
	public static final String EMPTY_STRING = '';
	public static final String JSON_ARRAY = '[{\"n\":\"JHPostSandboxScript\",\"s\":true,\"d\":\"2016-10-12\",\"b\":\"Bobby White\",\"cd\":\"2016-10-12\",\"cb\":\"Bobby White\",\"t\":\"ApexClass\"},{\"n\":\"JHPostSandboxScript_Test\",\"s\":true,\"d\":\"2016-10-12\",\"b\":\"Bobby White\",\"cd\":\"2016-10-12\",\"cb\":\"Bobby White\",\"t\":\"ApexClass\"},{\"n\":\"ApplicationUtil\",\"s\":true,\"d\":\"2016-10-12\",\"b\":\"Bobby White\",\"cd\":\"2016-10-12\",\"cb\":\"Bobby White\",\"t\":\"ApexClass\"}]';
	
	static testMethod void testParse() {
		String json = '{\"n\":\"JHPostSandboxScript\",\"s\":true,\"d\":\"2016-10-12\",\"b\":\"Bobby White\",\"cd\":\"2016-10-12\",\"r\":true,\"cb\":\"Bobby White\",\"t\":\"ApexClass\"}';
		CopadoMetadata obj = CopadoMetadata.parse(json);
		System.assert(obj != null);

		System.assertequals(obj.n,'JHPostSandboxScript','Name should match');
		System.assertEquals(obj.t,'ApexClass','Type should match');
		System.assertEquals(obj.s,true,'Selected should be true');
		System.assertEquals(obj.d,'2016-10-12','Modified Date should match');
		System.assertEquals(obj.b,'Bobby White','Modified by should match');
		System.assertEquals(obj.cd,'2016-10-12','Created Date should match');
		System.assertEquals(obj.cb,'Bobby White','Created by should match');
        System.assertEquals(obj.r,true,'Retrieve-Only should match');		
		System.assertEquals(obj.getKey(),'ApexClass:JHPostSandboxScript:true','Key not as expected');
	}

	static testMethod void testParseArray() {
     List<CopadoMetadata> theList = CopadoMetadata.parseArray(JSON_ARRAY);
     System.Assert(theList!=null,'never should be null');
     System.AssertEquals(theList.size(),3,'three selections expected');
	}

	static testMethod void testCompareToSort() {
        List<CopadoMetadata> myList = CopadoMetadata.parseArray(JSON_ARRAY);
        System.assert(myList != null,'Must produce an array');

        myList.sort();
        System.assertEquals('ApplicationUtil',myList[0].n,'Sort must place this item first!');
 
    }

    static testMethod void testCompareTo() {
        CopadoMetadata item1 = new CopadoMetadata();
        item1.t='ApexClass';
        item1.n='Alpha';
        item1.r=false;

        CopadoMetadata item2 = new CopadoMetadata();
        item2.t='ApexClass';
        item2.n='Omega';
        item2.r=false;

        CopadoMetadata item3 = new CopadoMetadata();
        item3.t='CustomObject';
        item3.n='Beta';
        item3.r=false;

        CopadoMetadata item4 = new CopadoMetadata();
        item4.t='CustomObject';
        item4.n='Beta';
        item4.r=false;

        CopadoMetadata item5 = new CopadoMetadata();
        item5.t=item4.t;
        item5.n=item4.n;
        item5.r=item4.r;
        CopadoMetadata item6 = new CopadoMetadata();
        item6.t=item5.t;
        item6.n=item5.n;
        item6.r=!item5.r; // toggle

        CopadoMetadata item7 = new CopadoMetadata();
        item7.t=item6.t;
        item7.n=item6.n;
        item7.r=!item6.r; // toggle back

        System.assertEquals(-1,item1.compareTo(item2),'Item2 should sort higher than 1');
        System.assertEquals(-1,item2.compareTo(item3),'Item3 should sort higher than 2');
        System.assertEquals(1,item4.compareTo(item2),'Item2 should sort lower than 4');
        System.assertEquals(0,item4.compareTo(item5),'Item4 should sort equal to 5');
        System.assert(item5.compareTo(item6) < 0,'Item5 should sort less than 6');         
        System.assert(item6.compareTo(item7) > 0,'Item6 should sort more than 7');    
    }

    static testMethod void testdedupReferences() {
    	CopadoMetadata item1 = new CopadoMetadata();
        item1.t='ApexClass';
        item1.n='Alpha';

        // Start with a null reference
        item1.userStoryReferences = null;

        item1.dedupReferences();
        System.AssertEquals(EMPTY_STRING,item1.userStoryReferences,'Expected EMPTY_STRING');

        item1.userStoryReferences = 'A';
        item1.dedupReferences();

        System.AssertEquals('A',item1.userStoryReferences,'Expected a single item');

        item1.userStoryReferences = 'A,B,C';
        item1.dedupReferences();

        System.AssertEquals('A,B,C',item1.userStoryReferences,'Expected three items');

        item1.userStoryReferences = 'A,A,B,B,A,C,W';
        item1.dedupReferences();

        System.AssertEquals('A,B,C,W',item1.userStoryReferences,'Expected four items');


    }
}